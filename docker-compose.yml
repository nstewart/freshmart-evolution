version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    user: postgres:postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecret
      POSTGRES_DB: freshmart
      LOAD_DATA: ${LOAD_DATA:-true}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5
      # Data generation takes a while.
      start_period: 120s
    deploy:
        resources:
          limits:
            cpus: "4"
            memory: 4G
    command: 
      - "postgres"
      - "-c"
      - "shared_buffers=2GB"
      - "-c"
      - "work_mem=256MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "effective_cache_size=6GB"
      - "-c"
      - "synchronous_commit=off"
      - "-c"
      - "checkpoint_timeout=1h"
      - "-c"
      - "max_wal_size=10GB"
      - "-c"
      - "max_slot_wal_keep_size=2GB"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "statement_timeout=0"  # Disable statement timeout at instance level
      - "-c"
      - "idle_in_transaction_session_timeout=0"  # Disable idle timeout
    volumes:
      - ./data:/data
      - postgres_data:/var/lib/postgresql/data
    shm_size: 1gb

  postgres_init:
    image: postgres:latest
    user: postgres:postgres
    volumes:
      - .:/app
      - ./data:/data
      - ./freshmart:/freshmart
      - ./freshfund:/freshfund
    working_dir: /app
    environment:
      - PGHOST=postgres
      - PGUSER=postgres
      - PGPASSWORD=mysecret
      - PGDATABASE=template1
      - DB_HOST=postgres
      - DB_NAME=freshmart
      - DB_USER=postgres
      - DB_PASSWORD=mysecret
      - LOAD_DATA=${LOAD_DATA:-true}
      - REDUCED_DATA=${REDUCED_DATA:-false}
      - DEMO=${DEMO:-freshmart}
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c '
        echo "Testing PostgreSQL connection..." &&
        psql -c "SELECT version();" &&
        if [ "$$LOAD_DATA" = "true" ]; then
          psql -c "SELECT 1 FROM pg_database WHERE datname = '\''freshmart'\''" | grep -q 1 ||
          psql -c "CREATE DATABASE freshmart;" &&
          echo "Setting up database..." &&
          sed -i "s/localhost/$${PGHOST}/g" setup_database.sh &&
          sed -i "s/source backend\/.env/true/g" setup_database.sh &&
          if [ "$$REDUCED_DATA" = "true" ]; then
            bash setup_database.sh postgres "$$DEMO" --reduced;
          else
            bash setup_database.sh postgres "$$DEMO";
          fi
        else
          echo "Skipping data loading for PostgreSQL...";
        fi
      '

  materialize:
    image: materialize/materialized:latest
    container_name: materialize
    depends_on:
      postgres_init:
        condition: service_completed_successfully
    ports:
      - "6874:6874"
      - "6875:6875"
      - "6876:6876"
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:6878/api/readyz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 8G

  materialize_init:
    image: postgres:latest
    user: postgres:postgres
    volumes:
      - .:/app
      - ./mz_queries.sql:/app/mz_queries.sql
      - ./mz_connection_setup.sql:/app/mz_connection_setup.sql
    working_dir: /app
    environment:
      - PGHOST=materialize
      - PGPORT=6875
      - PGUSER=materialize
      - PGPASSWORD=materialize
      - PGDATABASE=materialize
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=freshmart
      - DB_USER=postgres
      - DB_PASSWORD=mysecret
      - MZ_HOST=materialize
      - MZ_PORT=6875
      - MZ_USER=materialize
      - MZ_PASSWORD=materialize
      - MZ_NAME=materialize
      - LOAD_DATA=${LOAD_DATA:-true}
    depends_on:
      materialize:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: >
      bash -c '
        echo "Setting up Materialize..." &&
        echo "Testing Materialize connection..." &&
        PGHOST=materialize PGPORT=6875 psql -c "SELECT version();" &&
        echo "Testing Postgres connection..." &&
        PGHOST=postgres PGPORT=5432 PGUSER=$${DB_USER} PGPASSWORD=$${DB_PASSWORD} psql -d freshmart -c "SELECT version();" &&
        echo "Setting up Materialize connections..." &&
        PGHOST=materialize PGPORT=6875 psql -f mz_connection_setup.sql &&
        if [ "$$LOAD_DATA" = "true" ]; then
          echo "Creating Materialize views..." &&
          PGHOST=materialize PGPORT=6875 psql -f mz_queries.sql;
        else
          echo "Skipping view creation for Materialize...";
        fi
      '

  backend:
    build: backend
    environment:
      - DB_HOST=postgres
      - DB_NAME=freshmart
      - DB_USER=postgres
      - DB_PASSWORD=mysecret
      - MZ_HOST=materialize
      - MZ_PORT=6875
      - MZ_USER=materialize
      - MZ_PASSWORD=materialize
      - MZ_NAME=materialize
      - MZ_SYSTEM_PARAMETER_DEFAULT=statement_logging_sample_rate=0
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/usr/src/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker:/var/lib/docker:ro
    depends_on:
      materialize_init:
        condition: service_completed_successfully

  frontend:
    build: frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/usr/src/app
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data:
    driver: local
